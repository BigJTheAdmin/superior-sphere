---
// src/components/StatusTicker.astro
---
<div id="status-ticker-host"></div>

<script type="module">
  const host = document.getElementById("status-ticker-host");
  const root = host.attachShadow({ mode: "open" });

  root.innerHTML = `
    <style>
      .ticker-wrapper{overflow:hidden;background:#111;border-bottom:2px solid #333}
      .ticker{display:inline-flex;white-space:nowrap;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;font-size:.85rem;padding:.5rem 1rem;gap:3rem;font-weight:700;will-change:transform}
      .lane{display:inline-flex;white-space:nowrap;gap:2rem}
      .chip{display:inline-flex;align-items:center;gap:.5rem;padding:.15rem .5rem;border-radius:9999px;border:1px solid #333;background:#0b0b0b}
      .dot{width:8px;height:8px;border-radius:9999px;box-shadow:0 0 8px currentColor}
      .up{color:#14f195!important}
      .down{color:#ff3b3b!important}
      .checking{color:#ffb020!important}
      .track{position:relative;width:100%;overflow:hidden}
      .rail{display:inline-flex;white-space:nowrap;gap:3rem;animation:scroll linear infinite}
      @keyframes scroll{from{transform:translateX(0)}to{transform:translateX(-50%)}}
      .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0;white-space:nowrap}
    </style>

    <div class="ticker-wrapper" aria-live="polite" aria-atomic="false">
      <div class="track">
        <div id="rail" class="rail">
          <div id="laneA" class="ticker lane">Loading…</div>
          <div id="laneB" class="ticker lane">Loading…</div>
        </div>
      </div>
      <span id="a11y" class="sr-only"></span>
    </div>
  `;

  const $ = (s)=>root.querySelector(s);
  const laneA = $("#laneA");
  const laneB = $("#laneB");
  const rail  = $("#rail");
  const a11y  = $("#a11y");

  // Resolve correct JSON URL on GH Pages or custom domain
  const JSON_FILENAME = "ping-services.json";
  let FETCH_URL = "/ping-services.json";
  try {
    const baseHref = document.querySelector('base')?.getAttribute('href') || "/";
    FETCH_URL = new URL(JSON_FILENAME, new URL(baseHref, location.origin)).toString();
  } catch {}

  const BASE_POLL_MS = 30_000;
  const POLL_JITTER_MS = 5_000;
  const FETCH_TIMEOUT_MS = 12_000;
  const PX_PER_SEC = 90;
  const DATA_STALE_MS = 3 * 60_000;
  const DATA_FRESH_MS = 75_000;
  const REQUIRE_CONSEC_FAILS = 2;
  const LOCAL_CACHE_KEY = "pts_status_ticker_cache_v4";
  const STATE_CACHE_KEY = "pts_status_ticker_state_v4";

  const renderCache = loadJson(LOCAL_CACHE_KEY) || { items: [], ts: 0 };
  const stateCache  = loadJson(STATE_CACHE_KEY)  || {};

  if (renderCache.items?.length) { render(renderCache.items); autosizeScroller(); }

  let pollTimer=null;
  const tick = async()=>{ await update(); scheduleNext(); };
  scheduleNext(true);
  function scheduleNext(immediate=false){
    if(pollTimer) clearTimeout(pollTimer);
    if(immediate) return void tick();
    const j=(Math.random()*2-1)*POLL_JITTER_MS;
    pollTimer=setTimeout(tick, BASE_POLL_MS+j);
  }

  document.addEventListener("visibilitychange", ()=> {
    rail.style.animationPlayState = document.hidden ? "paused" : "running";
  });
  new ResizeObserver(()=>autosizeScroller()).observe(rail);

  async function fetchJson() {
    const once = async () => {
      const controller = new AbortController();
      const timer = setTimeout(()=>controller.abort(), FETCH_TIMEOUT_MS);
      try {
        const res = await fetch(FETCH_URL, { cache: "no-store", signal: controller.signal });
        if (!res.ok) throw new Error(`HTTP ${res.status} at ${FETCH_URL}`);
        return await res.json();
      } finally { clearTimeout(timer); }
    };
    try { return await once(); }
    catch(e){
      console.warn("[StatusTicker] fetch failed, retrying:", e?.message||e);
      try { return await once(); }
      catch(e2){
        console.warn("[StatusTicker] second fetch failed, using cache:", e2?.message||e2);
        if (renderCache.items?.length) return renderCache.items;
        throw e2;
      }
    }
  }

  async function update(){
    let data;
    try { data = await fetchJson(); }
    catch { return; }

    const arr = Array.isArray(data) ? data : (data?.results ?? data ?? []);
    if (!Array.isArray(arr) || !arr.length) return;

    const cooked = postProcess(arr);
    if (!cooked.length) return;

    render(cooked); autosizeScroller();
    saveJson(LOCAL_CACHE_KEY, { items: cooked, ts: Date.now() });

    const downs=cooked.filter(i=>i.state==="down");
    a11y.textContent = downs.length ? `${downs.length} services down: ${downs.map(d=>d.name).join(", ")}`
                                    : `All services up (${cooked.length})`;
  }

  function postProcess(raw){
    const now=Date.now();
    const list = raw.map(r=>normalizeOne(r,now)).filter(Boolean).filter(i=>!i.isStale).map(applyOptimistic);
    for(const i of list){ stateCache[i.name]={state:i.state,lastTs:i.lastTs}; }
    saveJson(STATE_CACHE_KEY,stateCache);
    const order={down:0,up:1,checking:2};
    list.sort((a,b)=> order[a.state]-order[b.state] || a.name.localeCompare(b.name));
    return list;
  }

  function normalizeOne(r, now){
    const name=String(r.name ?? r.service ?? r.id ?? "").trim();
    if(!name) return null;
    const toMs=(v)=>{ if(v==null) return null; if(typeof v==="number") return v>1e12?v:v*1000; const d=new Date(v); return isNaN(d)?null:d.getTime(); };
    const lastTs = toMs(r.lastSeen) ?? toMs(r.lastUpdate) ?? toMs(r.checkedAt) ?? toMs(r.timestamp) ?? now;
    const age = now - lastTs;
    const isStale = age > DATA_STALE_MS;
    const isFresh = age <= DATA_FRESH_MS;

    const asBool=(v)=>{ if(typeof v==="boolean")return v; if(typeof v==="number")return v>0; if(typeof v==="string")return ["ok","up","true","healthy","success"].includes(v.toLowerCase()); return false; };
    const explicitUp   = asBool(r.up) || asBool(r.ok) || r.status===200 || String(r.status||"").startsWith("2");
    const explicitDown = asBool(r.down) || String(r.state||"").toLowerCase()==="down" ||
                         String(r.health||"").toLowerCase()==="unhealthy" || String(r.status||"").startsWith("5");
    const fails = Number(r.consecutiveFails ?? r.failures ?? r.consecutive_failures ?? 0) || 0;

    const numOrNull=(v)=>{ const n=Number(v); return Number.isFinite(n)?n:null; };

    return {
      name, lastTs, isStale, isFresh, explicitUp, explicitDown, fails,
      latencyMs: numOrNull(r.latencyMs ?? r.rtt ?? r.latency),
      region: r.region ?? r.pop ?? null,
      state: explicitUp ? "up" : (explicitDown ? "down" : "checking"),
    };
  }

  function applyOptimistic(i){
    const cached = stateCache[i.name];
    if(i.explicitUp){ i.state="up"; return i; }
    if(i.explicitDown && !i.isStale){
      if(i.fails>=REQUIRE_CONSEC_FAILS || i.fails===0){ i.state="down"; return i; }
      i.state="checking"; return i;
    }
    if(i.isFresh && i.fails===0){ i.state="up"; return i; }
    if(cached){
      const recent = (Date.now()-(cached.lastTs||0)) <= DATA_STALE_MS;
      if(recent && cached.state==="up"){ i.state="up"; return i; }
      if(recent && cached.state==="down"){ i.state="down"; return i; }
    }
    i.state="checking"; return i;
  }

  function render(items){
    const row = items.map(chip).join("");
    laneA.innerHTML=row; laneB.innerHTML=row;
  }

  function chip(i){
    const cls=i.state;
    const label= i.state==="up"?"UP":(i.state==="down"?"DOWN":"CHECKING");
    const title=[`${i.name} — ${label}`,
      i.latencyMs!=null?`Latency: ${Math.round(i.latencyMs)} ms`:null,
      i.region?`Region: ${i.region}`:null,
      i.lastTs?`Updated: ${new Date(i.lastTs).toLocaleString()}`:null
    ].filter(Boolean).join(" • ");
    const escapeHtml=(s)=>String(s).replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;").replaceAll('"',"&quot;").replaceAll("'","&#039;");
    return `<span class="chip ${cls}" title="${escapeHtml(title)}"><span class="dot ${cls}" aria-hidden="true"></span><span class="label">${escapeHtml(i.name)}: ${label}</span></span>`;
  }

  function autosizeScroller(){
    const wrapW = root.host.getBoundingClientRect().width || 1;
    ensureWidth(laneA,wrapW); ensureWidth(laneB,wrapW);
    const laneW = laneA.scrollWidth || 600;
    const dur = Math.max(8, Math.round(laneW / 90));
    rail.style.animationDuration = `${dur}s`;
  }
  function ensureWidth(lane,wrapW){
    const minW=Math.max(wrapW,600); let guard=0;
    while(lane.scrollWidth<minW && guard<8){ lane.innerHTML += lane.innerHTML; guard++; }
  }

  // tiny storage helpers
  function loadJson(k){ try{ return JSON.parse(localStorage.getItem(k)||"null"); }catch{ return null; } }
  function saveJson(k,o){ try{ localStorage.setItem(k, JSON.stringify(o)); }catch{} }
</script>
