---
// src/components/StatusTicker.astro
// v5 â€” Fixed top bar. GitHub Pages friendly.
// - Public IP via WebRTC/STUN (no CORS/HTTP needed)
// - NAT estimation via ICE candidates
// - Optional ISP/ASN/Location via ipwho.is (quiet timeouts)
// - Adds console beacon so you can verify prod is using THIS file.
---

<style>
  :root { --pts-bar-h: 0px; }
  #pts-status-bar {
    position: fixed; top: 0; left: 0; right: 0;
    z-index: 9999;
    background: #059669; /* emerald-600 */
    border-bottom: 1px solid rgba(0,0,0,.25);
  }
  body { padding-top: var(--pts-bar-h, 0px); }
  .container { max-width: 1200px; margin-inline: auto; padding-inline: 1rem; }
  @media (min-width: 640px) { .container { padding-inline: 1.5rem; } }
  .pts-status {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono","Courier New", monospace;
    font-size: 12px; line-height: 1.25rem; color: #d1fae5; white-space: pre-wrap; padding: 8px 0;
  }
  .status-label { color: #a7f3d0; }
  .status-warn  { color: #fde68a; }
  .status-err   { color: #fecaca; }
  .dim { opacity: .85; }
</style>

<div id="pts-status-bar" role="status" aria-live="polite" data-version="v5">
  <div class="container">
    <div id="pts-status" class="pts-status">
      <span class="status-label">Local IP:</span> Unavailable in browser
      <br /><span class="status-label">Public IP:</span> Detecting...
      <br /><span class="status-label">ISP:</span> Detecting...
      <br /><span class="status-label">ASN:</span> Detecting...
      <br /><span class="status-label">Location:</span> Detecting...
      <br /><span class="status-label">NAT Type:</span> Estimating...
      <br /><span class="status-label">Connection Type:</span> Unknown (Browser Limit)
    </div>
  </div>
</div>

<script is:inline>
(() => {
  console.log("%cPTS StatusTicker v5 loaded","color:#34d399;font-weight:bold");
  const bar = document.getElementById('pts-status-bar');
  const el  = document.getElementById('pts-status');
  if (!bar || !el) return;

  const pad = () => document.documentElement.style.setProperty('--pts-bar-h', bar.getBoundingClientRect().height + 'px');
  pad(); addEventListener('load', pad); addEventListener('resize', () => { clearTimeout(window.__pts_pad); window.__pts_pad = setTimeout(pad, 100); });

  // If something removes the bar, put it back.
  new MutationObserver(() => {
    if (!document.getElementById('pts-status-bar')) { document.body.prepend(bar); pad(); }
  }).observe(document.body, { childList: true });

  const S = { ip:'Detecting...', isp:'Detecting...', asn:'Detecting...', loc:'Detecting...', nat:'Estimating...', conn:'Unknown (Browser Limit)' };
  const render = () => {
    el.innerHTML =
`<span class="status-label">Local IP:</span> Unavailable in browser
<br /><span class="status-label">Public IP:</span> ${S.ip}
<br /><span class="status-label">ISP:</span> ${S.isp}
<br /><span class="status-label">ASN:</span> ${S.asn}
<br /><span class="status-label">Location:</span> ${S.loc}
<br /><span class="status-label">NAT Type:</span> ${S.nat}
<br /><span class="status-label">Connection Type:</span> ${S.conn}`;
  };
  render();

  const withTimeout = (p, ms, tag) => Promise.race([p, new Promise((_, r) => setTimeout(() => r(new Error(tag+' timed out')), ms))]);
  const fetchJSON = async (url, tag) => {
    const res = await withTimeout(fetch(url, { cache: 'no-store' }), 8000, tag);
    if (!res.ok) throw new Error(`${tag} HTTP ${res.status}`);
    const ct = (res.headers.get('content-type') || '').toLowerCase();
    if (!ct.includes('application/json')) {
      const t = await res.text(); try { return JSON.parse(t); } catch { throw new Error(`${tag}: Non-JSON`); }
    }
    return res.json();
  };

  const detectConn = () => {
    try {
      const n = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
      if (n && (n.type || n.effectiveType || n.downlink)) {
        const bits = []; if (n.type) bits.push(n.type); if (n.effectiveType) bits.push(n.effectiveType); if (n.downlink) bits.push(`${n.downlink}Mbps`);
        S.conn = bits.join(' / ');
      }
    } catch {}
    render();
  };

  const stunPublicIp = async () => {
    if (!('RTCPeerConnection' in window)) return { ip: null, srflx: false, relay: false };
    const pc = new RTCPeerConnection({ iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] });
    pc.createDataChannel('d');
    let pubIp = null, srflx = false, relay = false;
    pc.onicecandidate = (e) => {
      const cand = e.candidate && e.candidate.candidate; if (!cand) return;
      if (cand.includes(' typ srflx ')) srflx = true;
      if (cand.includes(' typ relay ')) relay = true;
      const parts = cand.split(' ');
      const maybeIp = parts.find(p => /^[0-9a-f:.]+$/i.test(p) && p.includes('.'));
      if (maybeIp && !pubIp) pubIp = maybeIp;
    };
    const offer = await pc.createOffer(); await pc.setLocalDescription(offer);
    await new Promise(r => setTimeout(r, 2500)); pc.close();
    return { ip: pubIp, srflx, relay };
  };

  (async () => {
    detectConn();

    try {
      const { ip, srflx, relay } = await stunPublicIp();
      S.nat = relay ? 'Symmetric/Restricted (relay observed)' : srflx ? 'Likely NAT (srflx observed)' : 'Open/Unknown (no srflx/relay)';
      S.ip = ip || '<span class="status-warn dim">Unavailable</span>'; render();
    } catch {
      S.nat = 'Unknown'; S.ip = '<span class="status-err">Unavailable</span>'; render();
    }

    const plainIp = (typeof S.ip === 'string' && !S.ip.includes('<')) ? S.ip : null;
    if (plainIp) {
      try {
        const who = await fetchJSON(`https://ipwho.is/${encodeURIComponent(plainIp)}`, 'ipwho.is');
        S.isp = who?.connection?.isp || who?.isp || 'Unknown';
        const asn = who?.connection?.asn || who?.asn || '';
        S.asn = asn ? `AS${asn}` : 'Unknown';
        const city = who?.city || '', region = who?.region || who?.region_name || '', country = who?.country || who?.country_code || '';
        S.loc = [city, region, country].filter(Boolean).join(', ') || (who?.continent || 'Unknown');
      } catch {
        S.isp = '<span class="status-warn dim">Unavailable</span>';
        S.asn = '<span class="status-warn dim">Unavailable</span>';
        S.loc = '<span class="status-warn dim">Unavailable</span>';
      }
      render();
    } else {
      S.isp = S.asn = S.loc = '<span class="status-warn dim">Unavailable</span>'; render();
    }
  })();
})();
</script>
