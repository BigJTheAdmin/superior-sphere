---
import PageLayout from "@/layouts/Base.astro";
---

<PageLayout meta={{ title: "DNS Lookup" }}>
	<section class="tool-wrapper">
		<h1>DNS Lookup Tool</h1>
		<p>
			Use this tool to perform DNS lookups across all major record types. Great for help desk agents
			and network engineers troubleshooting domain issues.
		</p>

		<div class="tool-card">
			<input id="query" placeholder="example.com or IP address" />
			<button id="run-check">Run Full Check</button>

			<div id="dns-status" class="status"></div>
			<div id="dns-output" class="output"></div>
		</div>

		<div class="info-card">
			<h2>What is DNS?</h2>
			<p>
				DNS (Domain Name System) translates domain names (like <code>google.com</code>) into IP
				addresses. It's often described as the "phone book of the internet."
			</p>

			<h3>Record Types Explained</h3>
			<ul>
				<li><strong>A</strong> – Maps domain to IPv4 address</li>
				<li><strong>AAAA</strong> – Maps domain to IPv6 address</li>
				<li><strong>CNAME</strong> – Alias of another domain</li>
				<li><strong>MX</strong> – Mail server for the domain</li>
				<li><strong>NS</strong> – Name servers for the domain</li>
				<li><strong>SOA</strong> – Start of Authority: primary name server & zone info</li>
				<li><strong>TXT</strong> – Text data like SPF, DKIM, etc.</li>
				<li><strong>PTR</strong> – Reverse lookup for IPs</li>
			</ul>

			<h3>ommon Help Desk Use Cases</h3>
			<ul>
				<li>Check if a domain resolves to the correct IP (A/AAAA)</li>
				<li>Verify email configuration (MX + TXT)</li>
				<li>Check DNS propagation issues across records</li>
				<li>Perform reverse lookups on IPs (PTR)</li>
			</ul>
		</div>
	</section>

	<script type="module">
		document.addEventListener("DOMContentLoaded", () => {
			const runBtn = document.getElementById("run-check");
			const statusDiv = document.getElementById("dns-status");
			const outputDiv = document.getElementById("dns-output");

			runBtn.addEventListener("click", async () => {
				const query = document.getElementById("query").value.trim();
				if (!query) {
					statusDiv.textContent = "⚠️ Enter a domain or IP address.";
					return;
				}

				statusDiv.textContent = "⏳ Running full DNS scan...";
				outputDiv.innerHTML = "";

				const types = [1, 28, 5, 15, 2, 6, 16]; // A, AAAA, CNAME, MX, NS, SOA, TXT
				let output = "";

				async function fetchDNS(name, type) {
					const res = await fetch(`https://dns.google/resolve?name=${name}&type=${type}`);
					return await res.json();
				}

				function recordTypeName(typeNumber) {
					const types = {
						1: "A",
						28: "AAAA",
						5: "CNAME",
						15: "MX",
						2: "NS",
						6: "SOA",
						16: "TXT",
						12: "PTR",
					};
					return types[typeNumber] || typeNumber;
				}

				function renderRecords(title, records) {
					if (!records || records.length === 0) return "";
					return `
						<h3>${title} Records</h3>
						<table>
							<thead>
								<tr><th>Name</th><th>Type</th><th>TTL</th><th>Data</th></tr>
							</thead>
							<tbody>
								${records
									.map(
										(r) => `
									<tr>
										<td>${r.name}</td>
										<td>${recordTypeName(r.type)}</td>
										<td>${r.TTL}</td>
										<td>${r.data}</td>
									</tr>
								`,
									)
									.join("")}
							</tbody>
						</table>
					`;
				}

				for (let type of types) {
					try {
						const data = await fetchDNS(query, type);
						if (data.Answer) {
							output += renderRecords(recordTypeName(type), data.Answer);
						}
					} catch (e) {
						console.warn(`Error fetching type ${type}:`, e);
					}
				}

				// PTR Lookup if it's an IP
				if (/^\d{1,3}(\.\d{1,3}){3}$/.test(query)) {
					const reversed = query.split(".").reverse().join(".") + ".in-addr.arpa";
					try {
						const data = await fetchDNS(reversed, 12);
						if (data.Answer) {
							output += renderRecords("PTR", data.Answer);
						}
					} catch (e) {
						console.warn("Error fetching PTR:", e);
					}
				}

				if (!output) {
					statusDiv.textContent = "❌ No DNS records found.";
				} else {
					statusDiv.textContent = "✅ Scan complete.";
					outputDiv.innerHTML = output;
				}
			});
		});
	</script>

	<style>
		.tool-wrapper {
			padding: 2rem;
			font-family: Consolas, monospace;
			background: #0d0d0d;
			color: #e0e0e0;
			min-height: 100vh;
		}
		.tool-card {
			background: #1e1e1e;
			border: 1px solid #333;
			border-radius: 12px;
			padding: 1.5rem;
			margin-top: 1rem;
		}
		.tool-card input,
		.tool-card button {
			width: 100%;
			padding: 0.5rem;
			margin: 0.5rem 0;
			background: #111;
			border: 1px solid #333;
			border-radius: 6px;
			color: #fff;
		}
		.tool-card button {
			background: #0ff;
			color: #000;
			font-weight: bold;
			cursor: pointer;
		}
		.status {
			margin-top: 1rem;
			font-weight: bold;
			color: #0ff;
		}
		.output {
			margin-top: 1rem;
			overflow-x: auto;
		}
		h3 {
			margin-top: 2rem;
			color: #00e0ff;
		}
		table {
			width: 100%;
			border-collapse: collapse;
			margin-top: 0.5rem;
			background: #1a1a1a;
		}
		th,
		td {
			border: 1px solid #333;
			padding: 8px;
			text-align: left;
		}
		th {
			background: #222;
			color: #0ff;
		}
		.info-card {
			margin-top: 2rem;
			background: #141414;
			padding: 1.5rem;
			border: 1px solid #333;
			border-radius: 12px;
		}
		.info-card h2,
		.info-card h3 {
			color: #00e0ff;
		}
		.info-card code {
			color: #0ff;
			background: #222;
			padding: 2px 4px;
			border-radius: 4px;
		}
	</style>
</PageLayout>
