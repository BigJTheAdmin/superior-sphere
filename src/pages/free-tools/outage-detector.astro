---
import PageLayout from "@/layouts/Base.astro";
---

<PageLayout meta={{ title: "ISP Outage Detector" }}>
  <h1>ISP Outage Detector</h1>
  <p>Multi-window console with diagnostics, map, weather, and a crowdsourced heatmap.</p>

  <style>
    :root {
      --card-bg:#1e1e1e; --card-br:#333; --muted:#9aa0a6;
      --pill:#0f172a; --pill-br:#223;
      --good:#22c55e; --warn:#f59e0b; --bad:#ef4444; --accent:#60a5fa;
    }
    .wrap { display:flex; flex-direction:column; gap:16px; margin-top:10px; }

    .grid {
      display:grid; grid-template-columns: repeat(12, 1fr);
      gap:12px; align-items:stretch; grid-auto-rows:1fr;
    }
    .col-4{grid-column:span 4;} .col-5{grid-column:span 5;}
    .col-7{grid-column:span 7;} .col-8{grid-column:span 8;}
    @media (max-width:1100px){ .grid{grid-template-columns:repeat(6,1fr)} .grid>.card{grid-column:span 6!important}}
    @media (max-width:700px){ .grid{grid-template-columns:repeat(2,1fr)} .grid>.card{grid-column:span 2!important}}

    .card{background:var(--card-bg);border:1px solid var(--card-br);border-radius:12px;padding:12px;display:flex;flex-direction:column;min-width:0;box-sizing:border-box}
    .badge{display:inline-flex;align-items:center;gap:6px;font-size:.8rem;padding:3px 8px;color:#cbd5e1;background:var(--pill);border:1px solid var(--pill-br);border-radius:999px}

    input,select,button,textarea{background:#121212;color:#e5e7eb;border:1px solid #2b2b2b;border-radius:8px;padding:8px 10px;box-sizing:border-box}
    input,select,button{height:36px}
    button{background:#2563eb;border:none;cursor:pointer}
    button.secondary{background:#374151}
    button:disabled{opacity:.6;cursor:not-allowed}

    .row{display:grid;grid-template-columns:repeat(12,1fr);gap:12px;align-items:end}
    .row>*{min-width:0}
    .small{color:var(--muted);font-size:.85rem}
    .statgrid{display:grid;grid-template-columns:repeat(4,1fr);gap:8px;margin-top:8px}
    @media (max-width:700px){.statgrid{grid-template-columns:repeat(2,1fr)}}
    .pill{background:#121212;border:1px solid #2b2b2b;border-radius:10px;padding:10px}

    /* Map */
    #mapBox{height:360px;border-radius:10px;overflow:hidden;background:#0b0b0b;border:1px solid #2a2a2a}
    #map{width:100%;height:100%;display:block}
    .mapControls{display:flex;gap:8px;align-items:center;margin-top:8px;flex-wrap:wrap}
    .kv{display:flex;gap:8px;flex-wrap:wrap}
    .kv span{background:#121212;border:1px solid #2b2b2b;border-radius:8px;padding:5px 8px}

    /* Lists */
    .list{display:grid;grid-template-columns:1fr auto;gap:6px 8px}
    .ok{color:var(--good)}.slow{color:var(--warn)}.fail{color:var(--bad)}

    /* Weather UI */
    #weatherBox .now{display:flex;flex-wrap:wrap;gap:12px;align-items:center}
    #weatherBox .now .big{font-weight:700;font-size:1.05rem}
    #weatherBox .meta{color:var(--muted)}
    #weatherBox .forecast{display:grid;grid-template-columns:repeat(3,1fr);gap:8px;margin-top:8px}
    #weatherBox .day{background:#121212;border:1px solid #2b2b2b;border-radius:10px;padding:8px}
    #weatherBox .day b{display:block;margin-bottom:4px;font-size:.9rem;color:#e5e7eb}

    /* Quick Start layout tweaks */
    .toolbar .controls{display:flex;gap:8px;flex-wrap:wrap}
    .toolbar .inputs{display:flex;gap:8px}
    .toolbar .inputs>*{flex:1 1 0;min-width:0}
    .toolbar .tip{margin-top:6px;color:var(--muted)}
    .toolbar .right{text-align:right}
    @media (max-width:700px){
      .toolbar .row{grid-template-columns:1fr}
      .toolbar .section{grid-column:1/-1!important}
      .toolbar .right{text-align:left}
      .toolbar button{padding:6px 10px}
    }

    /* Heatmap explanation */
    .mapExplain{margin-top:6px;border-top:1px dashed #2a2a2a;padding-top:8px;display:flex;gap:12px;flex-wrap:wrap;align-items:center;color:var(--muted)}
    .legend{display:flex;align-items:center;gap:6px}
    .swatch{width:42px;height:12px;border-radius:6px;background:linear-gradient(90deg,#2dd4bf,#fde047,#fb923c,#ef4444);border:1px solid #2a2a2a}
  </style>

  <div class="wrap">
    <!-- Quick Start -->
    <div class="card toolbar">
      <div class="row">
        <div class="section" style="grid-column: span 3;">
          <label class="small">Quick Start</label>
          <div class="controls">
            <button id="btnLocate">Use My Location</button>
            <button id="btnChecks" class="secondary">Run Checks</button>
          </div>
          <div class="tip small" id="locStatus"></div>
          <div class="tip small">Tip: drag windows by their title bars. Use the taskbar to show/hide windows. Submit reports to color the heatmap.</div>
        </div>

        <div class="section" style="grid-column: span 5;">
          <label class="small">Search Location / Override ISP</label>
          <div class="inputs">
            <input id="txtLocation" placeholder="e.g. Atlanta, GA or 30303" />
            <input id="txtISP" placeholder="e.g. Comcast, AT&amp;T, spectrum" />
            <button id="btnApply" style="flex:0 0 auto;">Apply</button>
          </div>
        </div>

        <div class="section" style="grid-column: span 2;">
          <label class="small">Units</label>
          <select id="selUnits">
            <option value="imperial">Imperial (°F, mph)</option>
            <option value="metric">Metric (°C, km/h)</option>
          </select>
        </div>

        <div class="section right" style="grid-column: span 2;">
          <div class="small">Last check: <span id="lastCheck">—</span></div>
        </div>
      </div>
    </div>

    <!-- Status & Map -->
    <div class="grid">
      <div class="card col-4">
        <div class="badge">Status &amp; Summary</div>
        <div class="pill" style="margin-top:8px;">
          <div class="small">Overall: <b id="overallLbl">Looks OK</b></div>
          <div class="statgrid">
            <div class="pill"><div class="small">Targets</div><div id="statTargets" style="font-weight:600;font-size:1.05rem;">0</div></div>
            <div class="pill"><div class="small">Reachable</div><div id="statReach" style="font-weight:600;font-size:1.05rem;">0</div></div>
            <div class="pill"><div class="small">Slow (≥ 700ms)</div><div id="statSlow" style="font-weight:600;font-size:1.05rem;">0</div></div>
            <div class="pill"><div class="small">Failures</div><div id="statFail" style="font-weight:600;font-size:1.05rem;">0</div></div>
          </div>
        </div>

        <div class="pill" style="margin-top:8px;">
          <div class="small">Detected ISP</div>
          <div class="kv" id="kvISP"><span>—</span></div>
        </div>

        <div class="pill" style="margin-top:8px;">
          <div class="small">Weather</div>
          <div id="weatherBox" class="small">Fetching…</div>
        </div>
      </div>

      <div class="card col-8">
        <div class="badge">Map</div>
        <div id="mapBox"><div id="map"></div></div>
        <div class="mapControls">
          <button id="btnShow" class="secondary">Show</button>
          <button id="btnLiveIODA" class="secondary">Live (IODA)</button>
          <button id="btnClear" class="secondary">Clear</button>
          <div class="small">Heat points: <span id="heatCount">0</span></div>
          <div class="small" id="heatMsg"></div>
        </div>

        <!-- Heatmap explanation/legend -->
        <div class="mapExplain small">
          <span class="legend"><span class="swatch" aria-hidden="true"></span> Cool → Hot</span>
          <span id="heatExplain">Shows regions with active outage signals (CAIDA IODA). Click “Live (IODA)” to fetch the latest 60 minutes of anomalies.</span>
        </div>
      </div>
    </div>

    <!-- Network checks + Contacts -->
    <div class="grid">
      <div class="card col-7">
        <div class="badge">Network Target Checks</div>
        <div class="small" style="margin-top:6px;">Each target loads a tiny file to test reachability &amp; approximate latency. (Uses <code>fetch</code> with <code>mode:"no-cors"</code> to avoid CORS errors.)</div>
        <div id="checkList" class="list" style="margin-top:8px;"></div>
      </div>

      <div class="card col-5">
        <div class="badge">Provider Contacts</div>
        <div class="small" style="margin-top:6px;">Quick links for common ISPs.</div>
        <div class="list" style="margin-top:8px;">
          <div>AT&amp;T Support</div><div><a href="https://www.att.com/support/" target="_blank">support</a></div>
          <div>Verizon Support</div><div><a href="https://www.verizon.com/support/" target="_blank">support</a></div>
          <div>Spectrum Support</div><div><a href="https://www.spectrum.net/support/" target="_blank">support</a></div>
          <div>Xfinity Support</div><div><a href="https://www.xfinity.com/support/" target="_blank">support</a></div>
          <div>Cloudflare Status</div><div><a href="https://www.cloudflarestatus.com/" target="_blank">status</a></div>
          <div>Microsoft 365 Health</div><div><a href="https://status.office.com/" target="_blank">status</a></div>
        </div>
      </div>
    </div>

    <!-- Notes & Reports -->
    <div class="grid">
      <div class="card col-7">
        <div class="badge">My Outage Notes</div>
        <textarea id="notes" rows="6" style="margin-top:8px;width:100%;" placeholder="Record symptoms, ticket #s, modem lights…"></textarea>
      </div>

      <div class="card col-5">
        <div class="badge">Reports &amp; Heatmap</div>
        <div class="small" style="margin-top:8px;">Issue type: <select id="issueType"><option>Internet</option><option>TV</option><option>Phone</option></select></div>
        <div class="small" style="margin-top:8px;">Severity: <input id="sev" type="range" min="1" max="5" value="3" /> <span id="sevVal">3</span></div>
        <div class="small" style="margin-top:8px;">Notes (optional): <input id="repNotes" placeholder="short note" style="width:100%;" /></div>
        <div style="margin-top:8px; display:flex; gap:8px;">
          <button id="btnAddPoint">Add Sample Point</button>
          <button id="btnSubmit" class="secondary">Submit Report</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Leaflet CSS (CDN) -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

  <script type="module">
    /********** Utilities **********/
    const $ = (s)=>document.querySelector(s);
    const nowStr = ()=> new Date().toLocaleString();
    const sleep = (ms)=> new Promise(r=>setTimeout(r,ms));

    /********** Global location state (used by Weather + Map) **********/
    const GEO = { lat:null, lon:null };
    function setGeo(lat, lon){
      if (!isFinite(lat) || !isFinite(lon)) return;
      GEO.lat = +lat; GEO.lon = +lon;
      initMap(); setMapCenter(GEO.lat, GEO.lon, 8);
      addHeatPoint(GEO.lat, GEO.lon, 0.35, "Your location/search");
      updateWeather();
    }

    /********** Leaflet Loader **********/
    function loadScript(src){
      return new Promise((resolve,reject)=>{
        const s=document.createElement("script");
        s.src=src; s.async=true; s.onload=resolve; s.onerror=()=>reject(new Error("load "+src));
        document.head.appendChild(s);
      });
    }
    async function ensureLeaflet(){
      if (window.L && window.L.heatLayer) return;
      if (!window.L) await loadScript("https://unpkg.com/leaflet@1.9.4/dist/leaflet.js");
      if (!window.L.heatLayer) await loadScript("https://unpkg.com/leaflet.heat@0.2.0/dist/leaflet-heat.js");
    }

    /********** Map / Heat state **********/
    const mapBox = $("#mapBox");
    const mapEl  = $("#map");
    const heatMsg = $("#heatMsg");
    let map = null, heat = null;
    let mapInitStarted = false;
    let mapReady = false;
    let queuedHeat = null;
    let heatPoints = []; // [lat,lng,intensity]

    function setHeatMsg(msg){ if (heatMsg) heatMsg.textContent = msg || ""; }

    async function initMap(){
      if (map || mapInitStarted) return;
      if (mapBox.offsetWidth===0 || mapBox.offsetHeight===0) return;
      mapInitStarted = true;

      await ensureLeaflet();
      const L = window.L;

      try {
        map = L.map(mapEl, { center: [27.95, -82.46], zoom: 6, zoomControl: true });
      } catch (e) {
        console.warn("Leaflet init guard:", e?.message || e);
        mapInitStarted = false;
        return;
      }

      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "&copy; OpenStreetMap", maxZoom: 19
      }).addTo(map);

      heat = L.heatLayer([], { radius: 18, blur: 12, maxZoom: 17, minOpacity: .2 }).addTo(map);

      map.whenReady(()=>{
        mapReady = true;
        mapInitStarted = false;
        setTimeout(()=>map.invalidateSize(), 50);
        if (queuedHeat) { applyHeat(queuedHeat); queuedHeat=null; }
      });
    }

    function applyHeat(points){
      const pts = points ?? heatPoints;
      if (!mapReady || !map || !heat) { queuedHeat = pts; return; }
      if (!heat._map) heat.addTo(map);
      try { heat.setLatLngs(pts || []); } catch {}
      $("#heatCount").textContent = Array.isArray(pts) ? pts.length : 0;
    }

    function addHeatPoint(lat, lng, intensity=0.6, _sourceText){
      heatPoints.push([lat, lng, intensity]);
      applyHeat();
    }

    // public helpers (kept for other features)
    window.setMapCenter  = (lat,lng,zoom=8)=> { if (map) map.setView([lat,lng],zoom); };

    const io = new IntersectionObserver((ents)=>{
      ents.forEach(e=>{
        if (e.isIntersecting) {
          initMap();
          setTimeout(()=>map && map.invalidateSize(), 50);
        }
      });
    }, { threshold: .05 });
    io.observe(mapBox);
    window.addEventListener("resize", ()=> setTimeout(()=> map && map.invalidateSize(), 50));

    /********** IODA — real outage data **********
     * We query IODA for recent anomalies and place heat points at
     * the provided region centroids. If direct CORS fails, we retry
     * via a passthrough.
     ************************************************/
    const IODA = {
      // 60 minutes back, country = US (change as needed)
      buildUrl({minutes=60, country="US"}={}){
        const until = Math.floor(Date.now()/1000);
        const from  = until - minutes*60;
        // Endpoint returns active anomalies with region centroids (lat/lon) when available.
        // Entity type: country or region; signal: “internet-visibility” (aggregated).
        // NOTE: IODA keeps CORS enabled; we add a fallback proxy just in case.
        return `https://api.ioda.caida.org/v2/aggregates?from=${from}&until=${until}&entityType=country&entity=${encodeURIComponent(country)}&signal=internet-visibility`;
      },
      async fetchJson(url){
        // Try direct
        try{
          const r = await fetch(url, { cache:"no-store" });
          if (r.ok) return await r.json();
          throw new Error("IODA direct fetch failed: "+r.status);
        }catch(e){
          // Fallback through a permissive CORS proxy (GET only).
          const prox = "https://r.jina.ai/http/";
          try{
            const r2 = await fetch(prox + url, { cache:"no-store" });
            if (r2.ok) return await r2.json();
            throw new Error("IODA proxy fetch failed: "+r2.status);
          }catch(e2){
            throw e2;
          }
        }
      },
      // Normalize IODA aggregates → array of {lat, lon, intensity}
      normalize(payload){
        // Payload shape can vary. We accept a few common shapes:
        // - { data: [{lat, lon, value}] }
        // - { data: { series:[...], meta:{ entities:[{centroid:{lat,lon}, value}] } } }
        const out = [];
        if (!payload) return out;

        if (Array.isArray(payload.data)) {
          for (const d of payload.data) {
            const lat = +d.lat ?? +d.latitude, lon = +d.lon ?? +d.longitude;
            const val = +d.value ?? +d.intensity ?? 0;
            if (isFinite(lat) && isFinite(lon)) out.push({lat, lon, val});
          }
          return out;
        }

        if (payload.data && Array.isArray(payload.data.entities)) {
          for (const e of payload.data.entities) {
            const lat = +e?.centroid?.lat, lon = +e?.centroid?.lon;
            const val = +e?.value ?? +e?.score ?? 0;
            if (isFinite(lat) && isFinite(lon)) out.push({lat, lon, val});
          }
          return out;
        }

        if (payload.meta && Array.isArray(payload.meta.entities)) {
          for (const e of payload.meta.entities) {
            const lat = +e?.centroid?.lat, lon = +e?.centroid?.lon;
            const val = +e?.value ?? 0;
            if (isFinite(lat) && isFinite(lon)) out.push({lat, lon, val});
          }
          return out;
        }

        return out;
      }
    };

    async function loadIODA(minutes=60, country="US"){
      setHeatMsg("Fetching real outage signals (IODA)...");
      try{
        const url = IODA.buildUrl({minutes, country});
        const json = await IODA.fetchJson(url);
        const rows = IODA.normalize(json);

        if (!rows.length){
          setHeatMsg("No recent anomalies found by IODA for the selected window.");
          return;
        }

        // Scale intensity 0..1
        const vals = rows.map(r=>r.val).filter(v=>isFinite(v));
        const max = Math.max(...vals, 1);
        heatPoints = rows.map(r=>[r.lat, r.lon, Math.max(0.2, Math.min(1, r.val/max))]);
        applyHeat();
        setHeatMsg(`IODA: ${rows.length} regions with recent anomalies (last ${minutes} min).`);
      }catch(err){
        console.warn(err);
        setHeatMsg("IODA data unavailable (network/CORS). Try again or deploy behind HTTPS.");
      }
    }

    /********** Controls **********/
    $("#btnShow").addEventListener("click", ()=> { initMap(); setTimeout(()=>map && map.invalidateSize(), 50); });
    $("#btnLiveIODA").addEventListener("click", ()=> loadIODA(60, "US"));
    $("#btnClear").addEventListener("click", ()=> { heatPoints = []; applyHeat(); setHeatMsg("Heatmap cleared."); });
    $("#sev").addEventListener("input", (e)=> $("#sevVal").textContent = e.target.value);
    $("#btnAddPoint").addEventListener("click", ()=>{
      initMap(); if (!map) return;
      const c = map.getCenter();
      const jitter = 0.02;
      addHeatPoint(c.lat + (Math.random()-0.5)*jitter, c.lng + (Math.random()-0.5)*jitter, 0.9);
      setHeatMsg("Added a sample point near map center.");
    });

    /********** Robust “Use My Location” (GPS → IP fallback) **********/
    const locBtn = $("#btnLocate");
    const locStatus = $("#locStatus");
    function setLocStatus(msg){ if (locStatus) locStatus.textContent = msg || ""; }
    async function ipFallbackLocate(){
      setLocStatus("Using IP-based location…");
      try {
        const r = await fetch("https://ipapi.co/json/", { cache:"no-store" });
        if (r.ok) {
          const j = await r.json();
          if (j.latitude && j.longitude) setGeo(j.latitude, j.longitude);
          setLocStatus("Approximate location set from IP.");
          return true;
        }
      } catch {}
      setLocStatus("Couldn't determine location.");
      return false;
    }
    async function smartLocate(){
      const canUseGPS = !!navigator.geolocation && (window.isSecureContext || location.hostname === "localhost");
      locBtn.disabled = true; setLocStatus("Locating…");
      if (canUseGPS) {
        try {
          if (navigator.permissions?.query) {
            const p = await navigator.permissions.query({ name: "geolocation" });
            if (p.state === "denied") { await ipFallbackLocate(); locBtn.disabled=false; return; }
          }
        } catch {}
        try {
          const pos = await new Promise((res,rej)=>navigator.geolocation.getCurrentPosition(res,rej,{enableHighAccuracy:true,timeout:8000,maximumAge:0}));
          const { latitude:lat, longitude:lng } = pos.coords;
          setGeo(lat,lng); setLocStatus("Precise location set."); locBtn.disabled=false; return;
        } catch {}
      }
      await ipFallbackLocate(); locBtn.disabled=false;
    }
    locBtn.addEventListener("click", smartLocate);

    /********** Search/ISP override **********/
    $("#btnApply").addEventListener("click", async ()=>{
      const loc = $("#txtLocation").value.trim();
      const ispOverride = $("#txtISP").value.trim();
      if (loc) {
        try{
          const r = await fetch("https://nominatim.openstreetmap.org/search?format=json&q="+encodeURIComponent(loc), { headers:{ "accept-language":"en" }});
          const j = await r.json();
          if (j && j[0]) { setGeo(parseFloat(j[0].lat), parseFloat(j[0].lon)); setLocStatus("Location set from search."); }
        }catch{}
      }
      if (ispOverride) {
        const box = $("#kvISP");
        let ip="", asn="", locTxt="";
        for (const chip of box.querySelectorAll("span")) {
          const s = chip.textContent || "";
          if (s.startsWith("IP: ")) ip=s.slice(4);
          else if (s.startsWith("ASN: ")) asn=s.slice(5);
          else if (!s.startsWith("ISP: ")) locTxt = s;
        }
        renderISP({ ip, isp: ispOverride, asn, loc: locTxt });
      }
    });

    /********** ISP detection (multi-fallback) **********/
    function renderISP(info){
      const chips = [];
      if (info.ip)   chips.push(`IP: ${info.ip}`);
      if (info.isp)  chips.push(`ISP: ${info.isp}`);
      if (info.asn)  chips.push(`ASN: ${info.asn}`);
      if (info.loc)  chips.push(info.loc);
      $("#kvISP").innerHTML = chips.length ? chips.map(x=>`<span>${x}</span>`).join(" ") : "<span>—</span>";
    }
    async function detectIPInfo(){
      try{
        const r = await fetch("https://ipapi.co/json/", { cache:"no-store" });
        if (r.ok) {
          const j = await r.json();
          renderISP({ ip:j.ip, isp:j.org||j.org_name||j.asn_org||"", asn:j.as||j.asn||"", loc:[j.city,j.region,j.country_name].filter(Boolean).join(", ") });
          if (j.latitude && j.longitude) setGeo(j.latitude, j.longitude);
          return;
        }
      }catch{}
      try{
        const r = await fetch("https://ipinfo.io/json", { cache:"no-store" });
        if (r.ok) {
          const j = await r.json();
          renderISP({ ip:j.ip, isp:j.org||"", asn:j.as||"", loc:[j.city,j.region,j.country].filter(Boolean).join(", ") });
          if (j.loc) { const [la,lo]=j.loc.split(",").map(parseFloat); if(isFinite(la)&&isFinite(lo)) setGeo(la,lo); }
          return;
        }
      }catch{}
      try{
        const r = await fetch("http://ip-api.com/json/", { cache:"no-store" });
        if (r.ok) {
          const j = await r.json();
          renderISP({ ip:j.query, isp:j.isp||j.org||"", asn:j.as||"", loc:[j.city,j.regionName,j.country].filter(Boolean).join(", ") });
          if (j.lat && j.lon) setGeo(j.lat, j.lon);
          return;
        }
      }catch{}
      try{
        const r = await fetch("https://www.cloudflare.com/cdn-cgi/trace", { cache:"no-store" });
        const t = await r.text(); const kv = Object.fromEntries(t.trim().split("\n").map(l=>l.split("=")));
        renderISP({ ip:kv.ip, loc: kv.colo ? `POP ${kv.colo}` : "" });
      }catch{ renderISP({}); }
    }

    /********** Weather (Open-Meteo) **********/
    const weatherBox = $("#weatherBox");
    const selUnits = $("#selUnits");
    function wmoText(code){
      const m = {0:"Clear",1:"Mainly clear",2:"Partly cloudy",3:"Overcast",45:"Fog",48:"Depositing rime fog",51:"Light drizzle",53:"Drizzle",55:"Heavy drizzle",56:"Freezing drizzle",57:"Freezing drizzle",61:"Light rain",63:"Rain",65:"Heavy rain",66:"Freezing rain",67:"Freezing rain",71:"Light snow",73:"Snow",75:"Heavy snow",77:"Snow grains",80:"Rain showers",81:"Rain showers",82:"Violent rain showers",85:"Snow showers",86:"Heavy snow showers",95:"Thunderstorm",96:"Thunderstorm w/ hail",99:"Thunderstorm w/ heavy hail"};
      return m[code] ?? "—";
    }
    async function updateWeather(){
      if (!isFinite(GEO.lat) || !isFinite(GEO.lon)) { weatherBox.textContent = "Set a location to see current conditions."; return; }
      const isImp = selUnits.value === "imperial";
      const params = new URLSearchParams({
        latitude:String(GEO.lat), longitude:String(GEO.lon),
        current_weather:"true", hourly:"relativehumidity_2m",
        daily:"temperature_2m_max,temperature_2m_min,precipitation_sum",
        timezone:"auto",
        temperature_unit: isImp?"fahrenheit":"celsius",
        windspeed_unit: isImp?"mph":"kmh",
        precipitation_unit: isImp?"inch":"mm"
      });
      weatherBox.textContent = "Loading weather…";
      try{
        const r = await fetch("https://api.open-meteo.com/v1/forecast?"+params.toString(), { cache:"no-store" });
        if (!r.ok) throw new Error("weather fetch failed");
        const j = await r.json();
        const cw = j.current_weather || {};
        const unitTemp = isImp ? "°F" : "°C";
        const unitWind = isImp ? "mph" : "km/h";
        const unitPrec = isImp ? "in" : "mm";
        let humid = "—";
        if (j.hourly?.time) {
          const idx = j.hourly.time.indexOf(cw.time);
          if (idx >= 0 && Array.isArray(j.hourly.relativehumidity_2m)) humid = j.hourly.relativehumidity_2m[idx] + "%";
        }
        const daily = j.daily || {};
        const days = [];
        if (Array.isArray(daily.time)) {
          for (let i=0;i<Math.min(3,daily.time.length);i++){
            const d = new Date(daily.time[i]+"T00:00");
            const name = d.toLocaleDateString(undefined,{weekday:"short"});
            const tmin = daily.temperature_2m_min?.[i], tmax = daily.temperature_2m_max?.[i], p = daily.precipitation_sum?.[i];
            days.push({name, range: (isFinite(tmin)&&isFinite(tmax))?`${Math.round(tmin)}° / ${Math.round(tmax)}°`:"—", prec: isFinite(p)?`${p} ${unitPrec}`:"—"});
          }
        }
        weatherBox.innerHTML = `
          <div class="now">
            <span class="big">${isFinite(cw.temperature)?Math.round(cw.temperature)+unitTemp:"—"}</span>
            <span>${wmoText(cw.weathercode)}</span>
            <span class="meta">Wind ${isFinite(cw.windspeed)?Math.round(cw.windspeed)+" "+unitWind:"—"}</span>
            <span class="meta">Humidity ${humid}</span>
            <span class="meta">${new Date(cw.time || Date.now()).toLocaleTimeString([], {hour:"2-digit", minute:"2-digit"})}</span>
          </div>
          <div class="forecast">
            ${days.map(d=>`<div class="day"><b>${d.name}</b><div>${d.range}</div><div class="meta">Precip ${d.prec}</div></div>`).join("")}
          </div>`;
      }catch(e){ weatherBox.textContent = "Weather unavailable."; }
    }
    selUnits.addEventListener("change", updateWeather);

    /********** Target Checks (unchanged) **********/
    const TARGETS = [
      ["Akamai","https://www.akamai.com/favicon.ico"],
      ["Apple","https://www.apple.com/favicon.ico"],
      ["Cloudflare","https://www.cloudflare.com/favicon.ico"],
      ["Amazon","https://www.amazon.com/favicon.ico"],
      ["Google","https://www.google.com/favicon.ico"],
      ["Microsoft","https://www.microsoft.com/favicon.ico"]
    ];
    function renderChecksInit(){
      const list = $("#checkList"); list.innerHTML = "";
      TARGETS.forEach(([name, url], i)=>{
        const left = document.createElement("div");  left.textContent = `${name} — ${url}`;
        const right = document.createElement("div"); right.id = "chk"+i; right.textContent = "…";
        list.appendChild(left); list.appendChild(right);
      });
    }
    async function timeFetch(url, timeout=6000){
      const t0 = performance.now(); const ctrl = new AbortController();
      const timer = setTimeout(()=>ctrl.abort("timeout"), timeout);
      try { await fetch(url + (url.includes("?")?"&":"?") + "_cb="+Math.random().toString(36).slice(2), { mode:"no-cors", cache:"no-store", signal:ctrl.signal }); clearTimeout(timer); return { ok:true, ms:performance.now()-t0 }; }
      catch { clearTimeout(timer); return { ok:false, ms:null }; }
    }
    async function runChecks(){
      renderChecksInit(); let ok=0, slow=0, fail=0;
      for (let i=0;i<TARGETS.length;i++){
        const [_, url] = TARGETS[i]; const res = await timeFetch(url); const cell = document.getElementById("chk"+i);
        if (res.ok) { const ms = Math.round(res.ms); ok++; if (ms>=700) slow++; cell.textContent = ms+" ms"; cell.className = ms>=700 ? "slow":"ok"; }
        else { fail++; cell.textContent = "timeout"; cell.className = "fail"; }
        $("#statTargets").textContent = TARGETS.length; $("#statReach").textContent = ok; $("#statSlow").textContent = slow; $("#statFail").textContent = fail;
        $("#overallLbl").textContent = fail ? "Problems detected" : (slow ? "Slower than usual" : "Looks OK");
        $("#lastCheck").textContent = nowStr();
      }
    }
    $("#btnChecks").addEventListener("click", runChecks);

    /********** Boot **********/
    renderChecksInit();
    detectIPInfo();
    initMap();
    updateWeather();
  </script>
</PageLayout>
