---
// File: src/pages/tags/[tag]/[...page].astro
import PageLayout from "@/layouts/Base.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import type { GetStaticPaths, Page } from "astro";

type Post = CollectionEntry<"post">; // change to your collection id if different

export const getStaticPaths = (async ({ paginate }) => {
  const PER_PAGE = 10;
  const posts = await getCollection("post");

  // Collect unique, trimmed tags
  const tagSet = new Set<string>();
  for (const p of posts) {
    const fm: any = p.data;
    if (Array.isArray(fm?.tags)) {
      for (const t of fm.tags) {
        const s = String(t ?? "").trim();
        if (s) tagSet.add(s);
      }
    }
  }

  // Build paginated paths per tag
  const paths: any[] = [];
  for (const tag of Array.from(tagSet)) {
    // Filter by tag
    const filtered = posts.filter((p) => {
      const fm: any = p.data;
      if (!Array.isArray(fm?.tags)) return false;
      for (const t of fm.tags) {
        if (String(t ?? "").trim() === tag) return true;
      }
      return false;
    });

    // Sort newest → oldest
    const sorted = filtered.slice().sort((a, b) => {
      const ad: any = (a.data as any)?.date ?? 0;
      const bd: any = (b.data as any)?.date ?? 0;
      return new Date(bd).getTime() - new Date(ad).getTime();
    });

    // Only create pages if there are posts for this tag
    if (sorted.length > 0) {
      const pagesForTag = paginate(sorted, {
        pageSize: PER_PAGE,
        params: { tag, page: [] }, // static-safe catch-all
      });
      paths.push(...pagesForTag);
    }
  }

  return paths;
}) satisfies GetStaticPaths;

interface Props {
  params?: { tag?: string };
  page: Page<Post>;
}

const { page } = Astro.props;

// SAFELY read the `tag` param (guards against undefined during CI render)
const safeTag = String((Astro.params?.tag ?? "").toString() || (Astro.props.params?.tag ?? "")).trim();

function hrefFor(entry: Post): string {
  const fm: any = entry.data;
  if (fm?.permalink) return fm.permalink;
  return "/posts/" + entry.slug + "/"; // adjust if your route differs
}

const prevHref: string | null = page.url.prev ?? null;
const nextHref: string | null = page.url.next ?? null;
---

<PageLayout meta={{ title: safeTag ? ("#" + safeTag) : "Tags", description: safeTag ? ("Posts tagged " + safeTag) : "Tagged posts" }}>
  <section class="container mx-auto px-6 py-10">
    <header class="mb-8">
      <h1 class="text-3xl font-semibold tracking-tight">
        {safeTag ? <>#{safeTag}</> : <>Tags</>}
      </h1>
      <p class="text-neutral-400 mt-1">
        {safeTag ? <>Posts tagged with “{safeTag}”.</> : <>Tagged posts.</>}
      </p>
    </header>

    <ul class="grid gap-6">
      {page.data.map((entry) => {
        const fm: any = entry.data;
        const title: string = fm?.title ?? entry.slug;
        const summary: string = fm?.description ?? fm?.excerpt ?? "";
        const dateStr: string = fm?.date ? new Date(fm.date).toLocaleDateString() : "";

        return (
          <li class="rounded-xl border border-neutral-800/80 bg-neutral-900/40 p-5 hover:border-neutral-700 transition-colors">
            <a href={hrefFor(entry)} class="block focus:outline-none focus:ring-2 focus:ring-green-500 rounded-lg">
              <h2 class="text-xl font-medium">{title}</h2>
              {dateStr && <p class="text-xs text-neutral-400 mt-1">{dateStr}</p>}
              {summary && <p class="text-neutral-300 mt-2">{summary}</p>}
            </a>
          </li>
        );
      })}
    </ul>

    <nav class="mt-10 flex items-center justify-between">
      {prevHref ? (
        <a class="rounded-md border border-neutral-700 px-4 py-2 text-sm hover:bg-neutral-800" href={prevHref}>← Newer</a>
      ) : (
        <span class="rounded-md border border-neutral-900 px-4 py-2 text-sm text-neutral-600">← Newer</span>
      )}

      <p class="text-neutral-500 text-sm">
        Page {page.currentPage} of {page.lastPage}
      </p>

      {nextHref ? (
        <a class="rounded-md border border-neutral-700 px-4 py-2 text-sm hover:bg-neutral-800" href={nextHref}>Older →</a>
      ) : (
        <span class="rounded-md border border-neutral-900 px-4 py-2 text-sm text-neutral-600">Older →</span>
      )}
    </nav>
  </section>
</PageLayout>
