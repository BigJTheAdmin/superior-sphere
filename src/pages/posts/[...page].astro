---
// File: src/pages/posts/[...page].astro
import PageLayout from "@/layouts/Base.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import type { GetStaticPaths, Page } from "astro";

// Optional: if you have a sorter util, you can import it and use it instead.
const sortByDate = (a: CollectionEntry<"post">, b: CollectionEntry<"post">) => {
  const ad = (a.data as any)?.date ?? 0;
  const bd = (b.data as any)?.date ?? 0;
  return new Date(bd).getTime() - new Date(ad).getTime();
};

export const getStaticPaths = (async ({ paginate }) => {
  const PER_PAGE = 10;
  const posts = await getCollection("post"); // change "post" if your collection id differs
  const sorted = posts.sort(sortByDate);

  return paginate(sorted, {
    pageSize: PER_PAGE,
    params: { page: [] }, // static-safe catch-all
  });
}) satisfies GetStaticPaths;

interface Props {
  page: Page<CollectionEntry<"post">>;
}

const { page } = Astro.props;

function hrefFor(entry: CollectionEntry<"post">) {
  const fm = entry.data as any;
  if (fm?.permalink) return fm.permalink;
  return `/posts/${entry.slug}/`; // adjust to match your slug route
}

const prevHref = page.url.prev ?? null;
const nextHref = page.url.next ?? null;
---

<PageLayout meta={{ title: "Posts", description: "Articles & updates." }}>
  <section class="container mx-auto px-6 py-10">
    <header class="mb-8 flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-semibold tracking-tight">Posts</h1>
        <p class="text-neutral-400 mt-1">Browse the latest from PingTraceSSH.</p>
      </div>
      <a class="text-accent underline underline-offset-4"
         href={"/rss.xml"} target="_blank" rel="noopener">
        RSS
      </a>
    </header>

    <ul class="grid gap-6">
      {page.data.map((entry) => {
        const fm = entry.data as any;
        const title = fm?.title ?? entry.slug;
        const summary = fm?.description ?? fm?.excerpt ?? "";
        const dateStr = fm?.date ? new Date(fm.date).toLocaleDateString() : "";
        const tags = Array.isArray(fm?.tags) ? fm.tags : [];

        return (
          <li class="rounded-xl border border-neutral-800/80 bg-neutral-900/40 p-5 hover:border-neutral-700 transition-colors">
            <a href={hrefFor(entry)} class="block focus:outline-none focus:ring-2 focus:ring-green-500 rounded-lg">
              <h2 class="text-xl font-medium">{title}</h2>
              {dateStr && <p class="text-xs text-neutral-400 mt-1">{dateStr}</p>}
              {summary && <p class="text-neutral-300 mt-2">{summary}</p>}
              {tags.length > 0 && (
                <div class="mt-3 flex flex-wrap gap-2">
                  {tags.map((t: string) => (
                    <span class="rounded-md bg-neutral-800 px-2 py-0.5 text-xs text-neutral-300">#{t}</span>
                  ))}
                </div>
              )}
            </a>
          </li>
        );
      })}
    </ul>

    <nav class="mt-10 flex items-center justify-between">
      {prevHref ? (
        <a class="rounded-md border border-neutral-700 px-4 py-2 text-sm hover:bg-neutral-800" href={prevHref}>← Newer</a>
      ) : (
        <span class="rounded-md border border-neutral-900 px-4 py-2 text-sm text-neutral-600">← Newer</span>
      )}

      <p class="text-neutral-500 text-sm">
        Page {page.currentPage} of {page.lastPage}
      </p>

      {nextHref ? (
        <a class="rounded-md border border-neutral-700 px-4 py-2 text-sm hover:bg-neutral-800" href={nextHref}>Older →</a>
      ) : (
        <span class="rounded-md border border-neutral-900 px-4 py-2 text-sm text-neutral-600">Older →</span>
      )}
    </nav>
  </section>
</PageLayout>
