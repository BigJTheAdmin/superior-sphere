---
// File: src/pages/notes/[...page].astro
import PageLayout from "@/layouts/Base.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import type { GetStaticPaths, Page } from "astro";

type Note = CollectionEntry<"note">;

export const getStaticPaths = (async ({ paginate }) => {
  const PER_PAGE = 10;

  // Load and sort notes newest → oldest (inline sorter to avoid missing refs)
  const notes = await getCollection("note");
  const sorted = notes.slice().sort((a, b) => {
    const ad = (a.data as any)?.date ?? 0;
    const bd = (b.data as any)?.date ?? 0;
    return new Date(bd).getTime() - new Date(ad).getTime();
  });

  // Static-safe catch-all via params: { page: [] }
  return paginate(sorted, {
    pageSize: PER_PAGE,
    params: { page: [] },
  });
}) satisfies GetStaticPaths;

interface Props { page: Page<Note>; }
const { page } = Astro.props;

function hrefFor(entry: Note) {
  const fm = entry.data as any;
  if (fm?.permalink) return fm.permalink;
  return `/notes/${entry.slug}/`; // adjust if your route differs
}

const prevHref: string | null = page.url.prev ?? null;
const nextHref: string | null = page.url.next ?? null;
---

<PageLayout meta={{ title: "Notes", description: "Short notes & snippets." }}>
  <section class="container mx-auto px-6 py-10">
    <h1 class="text-3xl font-semibold tracking-tight mb-6">Notes</h1>

    <ul class="grid gap-6">
      {page.data.map((entry) => {
        const fm: any = entry.data;
        const title: string = fm?.title ?? entry.slug;
        const summary: string = fm?.description ?? fm?.excerpt ?? "";
        const dateStr: string = fm?.date ? new Date(fm.date).toLocaleDateString() : "";

        return (
          <li class="rounded-xl border border-neutral-800/80 bg-neutral-900/40 p-5 hover:border-neutral-700 transition-colors">
            <a href={hrefFor(entry)} class="block focus:outline-none focus:ring-2 focus:ring-green-500 rounded-lg">
              <h2 class="text-xl font-medium">{title}</h2>
              {dateStr && <p class="text-xs text-neutral-400 mt-1">{dateStr}</p>}
              {summary && <p class="text-neutral-300 mt-2">{summary}</p>}
            </a>
          </li>
        );
      })}
    </ul>

    <nav class="mt-10 flex items-center justify-between">
      {prevHref ? (
        <a class="rounded-md border border-neutral-700 px-4 py-2 text-sm hover:bg-neutral-800" href={prevHref}>← Newer</a>
      ) : (
        <span class="rounded-md border border-neutral-900 px-4 py-2 text-sm text-neutral-600">← Newer</span>
      )}

      <p class="text-neutral-500 text-sm">Page {page.currentPage} of {page.lastPage}</p>

      {nextHref ? (
        <a class="rounded-md border border-neutral-700 px-4 py-2 text-sm hover:bg-neutral-800" href={nextHref}>Older →</a>
      ) : (
        <span class="rounded-md border border-neutral-900 px-4 py-2 text-sm text-neutral-600">Older →</span>
      )}
    </nav>
  </section>
</PageLayout>
